name: Manual PR CI

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR Number'
        required: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      checks: write
      pull-requests: write
      contents: read

    steps:
      # 步骤1：获取 PR 的 SHA（修复变量引用）
      - name: Fetch PR SHA
        id: fetch-pr
        uses: actions/github-script@v6
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ inputs.pr_number }},
            });
            core.setOutput('sha', pr.data.head.sha);

      # 步骤2：创建 Check Run（修复字符串拼接）
      - name: Start CI Check
        uses: actions/github-script@v6
        with:
          script: |
            const sha = '${{ steps.fetch-pr.outputs.sha }}';  // 正确转义变量
            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Manual CI Check',
              head_sha: sha,
              status: 'in_progress',
            });

      # 步骤3：检出代码（处理 fork 仓库）
      - name: Checkout PR Code
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.fetch-pr.outputs.sha }}
          token: ${{ secrets.GITHUB_TOKEN }}

      # 步骤4：模拟 CI 流程
      - name: Setup environment
        run: echo "Setting up environment"
      
      - name: Build
        run: echo "Building project"
      
      - name: Run tests
        run: echo "Running tests"

      # 步骤5：更新 Check Run（修复 conclusion 逻辑）
      - name: Complete CI Check
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const conclusion = process.env.JOB_STATUS === 'success' ? 'success' : 'failure';
            await github.rest.checks.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              check_run_id: ${{ github.run_id }},
              conclusion: conclusion,
              completed_at: new Date().toISOString(),
            });
        env:
          JOB_STATUS: ${{ job.status }}  # 正确传递作业状态
